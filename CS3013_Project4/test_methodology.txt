// Vishal Rathi

To test my algorithms, I have three test methods. The first method is the memory maxer. It creates the page, stores the values and also gets the value in one loop. The other method first creates all the pages and then stores the value in them. This will ensure that th epage eviction was done correctly. I have changed the count from 1000 to 130 to get the results within an acceptable time. At the same time, I am creating pages in all the memory levels with 130 pages. The third method gets values of random pages. The user should have confidence because I am testing all the user API functions separately and at once both which should mean that the page eviction should be correct. 

 Here are my three test methods:

First Method:

void memoryMaxer() {
	vAddr indexes[1000];
	int i = 0;
	for (i = 0; i < 130; ++i) {
		indexes[i] = create_page();
		printf("Page created %d \n", indexes[i]);
		int valid = 0;
		int value = get_value(indexes[i], &valid);
		value = (i * 3);
		store_value(indexes[i], &value);
	}
	
	for (i = 0; i < 130; ++i) {
		free_page(indexes[i]);
	}
}

Second method:

void testmethod(){

	vAddr indexes[1000];
	int i = 0;
	for (i = 0; i < 130; ++i) {
		indexes[i] = create_page();
		printf("Page created %d \n", indexes[i]);
		int valid = 0;
		int value = get_value(130 - (i + 12), &valid);
		value = (i * 3);
		store_value(indexes[i], &value);
	}
	
	for (i = 0; i < 130; ++i) {
		free_page(indexes[i]);
	}

}

Third method:

void testMethod2() {
	vAddr indexes[1000];
	int i = 0;
	for( i = 0; i < 130; ++i ){
		indexes[i] = create_page();
		printf("Page created %d \n", i);
	}	
	for(i = 0; i < 130; i++) {
		int value = i * 2;
		store_value(indexes[i], &value);
	}
	for(i = 0; i < 130; i++)
		free_page(indexes[i]);
}

The output of my test methods for each eviction algorithm are in the output.txt file. I have discussed the efficiency of each algorithm in my README.txt file.

I also have a test for the multi-threaded program which is given below:

void initThreads(){
	int i; int error; int j = 0;
	
	// Store the thread number in the threads_count array
	for (i = 0; i < 10; i++){
		threads_count[i] = i;
	}
	
	// Use the pthread_create function to the create the threads
	for (i = 0; i < 10; i++){
		error = pthread_create(&tid[i], NULL, thread_process, &threads_count[i]);
		if (error != 0){
			printf("\ncan't create thread :[%s]", strerror(error));		// Throw an error if the thread can't get created
		}
	}

	// Join the threads after the threads are created
	while (j < 10){
		pthread_join(tid[j], NULL);
		j++;
	}
}
